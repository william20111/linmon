use std::fs::File;
use std::path::Path;
use std::io::Read;

pub static NETSTAT: &str = "/proc/net/netstat";

#[derive(Debug)]
pub struct NetStat {
    syn_cookies_sent: u64,
    syn_cookies_recv: u64,
    syn_cookies_failed: u64,
    embryonic_rsts: u64,
    prune_called: u64,
    rcv_pruned: u64,
    ofo_pruned: u64,
    out_of_window_icmps: u64,
    lock_dropped_icmps: u64,
    arp_filter: u64,
    tw: u64,
    tw_recycled: u64,
    tw_killed: u64,
    paws_passive: u64,
    paws_active: u64,
    paws_estab: u64,
    delayed_acks: u64,
    delayed_ack_locked: u64,
    delayed_ack_lost: u64,
    listen_overflows: u64,
    listen_drops: u64,
    tcp_prequeued: u64,
    tcp_direct_copy_from_backlog: u64,
    tcp_direct_copy_from_prequeue: u64,
    tcp_prequeue_dropped: u64,
    tcp_hp_hits: u64,
    tcp_hp_hits_to_user: u64,
    tcp_pure_acks: u64,
    tcp_hp_acks: u64,
    tcp_reno_recovery: u64,
    tcp_sack_recovery: u64,
    tcp_sack_reneging: u64,
    tcp_fack_reorder: u64,
    tcp_sack_reorder: u64,
    tcp_reno_reorder: u64,
    tcp_ts_reorder: u64,
    tcp_full_undo: u64,
    tcp_partial_undo: u64,
    tcp_dsack_undo: u64,
    tcp_loss_undo: u64,
    tcp_lost_retransmit: u64,
    tcp_reno_failures: u64,
    tcp_sack_failures: u64,
    tcp_loss_failures: u64,
    tcp_fast_retrans: u64,
    tcp_forward_retrans: u64,
    tcp_slow_start_retrans: u64,
    tcp_timeouts: u64,
    tcp_loss_probes: u64,
    tcp_loss_probe_recovery: u64,
    tcp_reno_recovery_fail: u64,
    tcp_sack_recovery_fail: u64,
    tcp_scheduler_failed: u64,
    tcp_rcv_collapsed: u64,
    tcp_dsack_old_send: u64,
    tcp_dsack_ofo_sent: u64,
    tcp_dsack_recv: u64,
    tco_dsack_ofo_recv: u64,
    tcp_abort_on_data: u64,
    tcp_abort_on_close: u64,
    tcp_abort_on_memory: u64,
    tcp_abort_on_timeout: u64,
    tcp_abort_on_linger: u64,
    tcp_abort_failed: u64,
    tcp_memory_pressures: u64,
    tcp_sack_discard: u64,
    tcp_dsack_ignored_old: u64,
    tcp_dsack_ignored_no_undo: u64,
    tcp_spurious_rtos: u64,
    tcp_md5_not_found: u64,
    tcp_md5_unexpected: u64,
    tcp_md5_failure: u64,
    tcp_sack_shifted: u64,
    tcp_sack_merged: u64,
    tcp_sack_shift_fallback: u64,
    tcp_backlog_drop: u64,
    pf_memalloc_drop: u64,
    tcp_min_ttl_drop: u64,
    tcp_defer_accept_drop: u64,
    ip_reverse_path_filter: u64,
    tcp_time_wait_overflow: u64,
    tcp_req_qfull_do_cookies: u64,
    tcp_req_qfull_drop: u64,
    tcp_retrans_fail: u64,
    tcp_rcv_coalesce: u64,
    tcp_ofo_queue: u64,
    tcp_ofo_drop: u64,
    tcp_ofo_merge: u64,
    tcp_challenge_ack: u64,
    tcp_syn_challenge: u64,
    tcp_fast_open_active: u64,
    tcp_fast_open_active_fail: u64,
    tcp_fast_open_passive: u64,
    tcp_fast_open_passive_fail: u64,
    tcp_fast_open_listen_overflow: u64,
    tcp_fast_open_cookie_reqd: u64,
    tcp_spurious_rtx_host_queues: u64,
    busy_poll_rx_packets: u64,
    tcp_auto_corking: u64,
    tcp_from_zero_window_adv: u64,
    tcp_to_zero_window_adv: u64,
    tcp_want_zero_window_adv: u64,
    tcp_syn_retrans: u64,
    tcp_orig_data_sent: u64,
    tcp_hystart_train_detect: u64,
    tcp_hystart_train_cwnd: u64,
    tcp_hystart_delay_detect: u64,
    tcp_hystart_delay_cwnd: u64,
    tcp_ack_skipped_syn_recv: u64,
    tcp_ack_skipped_paws: u64,
    tcp_ack_skipped_seq: u64,
    tcp_ack_skipped_fin_wait2: u64,
    tcp_ack_skipped_time_wait: u64,
    tcp_ack_skipped_challenge: u64,
    tcp_win_probe: u64,
    tcp_keep_alive: u64,
    tcp_mtup_fail: u64,
    tcp_mtup_success: u64,
    in_no_routes: u64,
    in_truncated_pkts: u64,
    in_mcast_pkts: u64,
    out_mcast_pkts: u64,
    in_bcast_pkts: u64,
    out_bcast_pkts: u64,
    in_octets: u64,
    out_octets: u64,
    in_mcast_octets: u64,
    out_mcast_octets: u64,
    in_bcast_octets: u64,
    out_bcast_octets: u64,
    in_csum_errors: u64,
    in_no_ect_pkts: u64,
    in_ect1_pkts: u64,
    in_ect0_pkts: u64,
    in_ce_pkts: u64,
}

impl PartialEq for NetStat {
    fn eq(&self, other: &NetStat) -> bool {
        (self.tcp_mtup_success == other.tcp_mtup_success)
            & (self.tcp_keep_alive == other.tcp_keep_alive)
            & (self.tcp_orig_data_sent == other.tcp_orig_data_sent)
            & (self.tcp_fast_open_listen_overflow == other.tcp_fast_open_listen_overflow)
            & (self.tcp_prequeue_dropped == other.tcp_prequeue_dropped)
    }
}

impl NetStat {
    pub fn netstat() -> NetStat {
        let text = NetStat::fetch();
        NetStat::parse(text)
    }

    fn fetch() -> String {
        let path = Path::new(NETSTAT);
        let mut data = String::new();
        let mut f = File::open(path).expect("Unable to open file");
        f.read_to_string(&mut data).expect("Unable to read string");
        data
    }

    fn parse(ns: String) -> NetStat {
        let splitter: Vec<&str> = ns.split("\n").collect();
        let tcp_values = splitter[1];
        let ip_values = splitter[3];
        let mut tcp_v: Vec<&str> = tcp_values.split(" ").collect();
        let mut ip_v: Vec<&str> = ip_values.split(" ").collect();
        tcp_v.remove(0);
        ip_v.remove(0);
        let mut parse: Vec<u64> = vec![];
        for item in tcp_v {
            let i = item.parse::<u64>().unwrap();
            parse.push(i);
        }
        for item in ip_v {
            let i = item.parse::<u64>().unwrap();
            parse.push(i);
        }
        NetStat {
            syn_cookies_sent: parse[0],
            syn_cookies_recv: parse[1],
            syn_cookies_failed: parse[2],
            embryonic_rsts: parse[3],
            prune_called: parse[4],
            rcv_pruned: parse[5],
            ofo_pruned: parse[6],
            out_of_window_icmps: parse[7],
            lock_dropped_icmps: parse[8],
            arp_filter: parse[9],
            tw: parse[10],
            tw_recycled: parse[11],
            tw_killed: parse[12],
            paws_passive: parse[13],
            paws_active: parse[14],
            paws_estab: parse[15],
            delayed_acks: parse[16],
            delayed_ack_locked: parse[17],
            delayed_ack_lost: parse[18],
            listen_overflows: parse[19],
            listen_drops: parse[20],
            tcp_prequeued: parse[21],
            tcp_direct_copy_from_backlog: parse[22],
            tcp_direct_copy_from_prequeue: parse[23],
            tcp_prequeue_dropped: parse[24],
            tcp_hp_hits: parse[25],
            tcp_hp_hits_to_user: parse[26],
            tcp_pure_acks: parse[27],
            tcp_hp_acks: parse[28],
            tcp_reno_recovery: parse[29],
            tcp_sack_recovery: parse[30],
            tcp_sack_reneging: parse[31],
            tcp_fack_reorder: parse[32],
            tcp_sack_reorder: parse[33],
            tcp_reno_reorder: parse[34],
            tcp_ts_reorder: parse[35],
            tcp_full_undo: parse[36],
            tcp_partial_undo: parse[37],
            tcp_dsack_undo: parse[38],
            tcp_loss_undo: parse[39],
            tcp_lost_retransmit: parse[40],
            tcp_reno_failures: parse[41],
            tcp_sack_failures: parse[42],
            tcp_loss_failures: parse[43],
            tcp_fast_retrans: parse[44],
            tcp_forward_retrans: parse[45],
            tcp_slow_start_retrans: parse[46],
            tcp_timeouts: parse[47],
            tcp_loss_probes: parse[48],
            tcp_loss_probe_recovery: parse[49],
            tcp_reno_recovery_fail: parse[50],
            tcp_sack_recovery_fail: parse[51],
            tcp_scheduler_failed: parse[52],
            tcp_rcv_collapsed: parse[53],
            tcp_dsack_old_send: parse[54],
            tcp_dsack_ofo_sent: parse[55],
            tcp_dsack_recv: parse[56],
            tco_dsack_ofo_recv: parse[57],
            tcp_abort_on_data: parse[58],
            tcp_abort_on_close: parse[59],
            tcp_abort_on_memory: parse[60],
            tcp_abort_on_timeout: parse[61],
            tcp_abort_on_linger: parse[62],
            tcp_abort_failed: parse[63],
            tcp_memory_pressures: parse[64],
            tcp_sack_discard: parse[65],
            tcp_dsack_ignored_old: parse[66],
            tcp_dsack_ignored_no_undo: parse[67],
            tcp_spurious_rtos: parse[68],
            tcp_md5_not_found: parse[69],
            tcp_md5_unexpected: parse[70],
            tcp_md5_failure: parse[71],
            tcp_sack_shifted: parse[72],
            tcp_sack_merged: parse[73],
            tcp_sack_shift_fallback: parse[74],
            tcp_backlog_drop: parse[75],
            pf_memalloc_drop: parse[76],
            tcp_min_ttl_drop: parse[77],
            tcp_defer_accept_drop: parse[78],
            ip_reverse_path_filter: parse[79],
            tcp_time_wait_overflow: parse[80],
            tcp_req_qfull_do_cookies: parse[81],
            tcp_req_qfull_drop: parse[82],
            tcp_retrans_fail: parse[83],
            tcp_rcv_coalesce: parse[84],
            tcp_ofo_queue: parse[85],
            tcp_ofo_drop: parse[86],
            tcp_ofo_merge: parse[87],
            tcp_challenge_ack: parse[88],
            tcp_syn_challenge: parse[89],
            tcp_fast_open_active: parse[90],
            tcp_fast_open_active_fail: parse[91],
            tcp_fast_open_passive: parse[92],
            tcp_fast_open_passive_fail: parse[93],
            tcp_fast_open_listen_overflow: parse[94],
            tcp_fast_open_cookie_reqd: parse[95],
            tcp_spurious_rtx_host_queues: parse[96],
            busy_poll_rx_packets: parse[97],
            tcp_auto_corking: parse[98],
            tcp_from_zero_window_adv: parse[99],
            tcp_to_zero_window_adv: parse[100],
            tcp_want_zero_window_adv: parse[101],
            tcp_syn_retrans: parse[102],
            tcp_orig_data_sent: parse[103],
            tcp_hystart_train_detect: parse[104],
            tcp_hystart_train_cwnd: parse[105],
            tcp_hystart_delay_detect: parse[106],
            tcp_hystart_delay_cwnd: parse[107],
            tcp_ack_skipped_syn_recv: parse[108],
            tcp_ack_skipped_paws: parse[109],
            tcp_ack_skipped_seq: parse[110],
            tcp_ack_skipped_fin_wait2: parse[111],
            tcp_ack_skipped_time_wait: parse[112],
            tcp_ack_skipped_challenge: parse[113],
            tcp_win_probe: parse[114],
            tcp_keep_alive: parse[115],
            tcp_mtup_fail: parse[116],
            tcp_mtup_success: parse[117],
            in_no_routes: parse[118],
            in_truncated_pkts: parse[119],
            in_mcast_pkts: parse[120],
            out_mcast_pkts: parse[121],
            in_bcast_pkts: parse[122],
            out_bcast_pkts: parse[123],
            in_octets: parse[124],
            out_octets: parse[125],
            in_mcast_octets: parse[126],
            out_mcast_octets: parse[127],
            in_bcast_octets: parse[128],
            out_bcast_octets: parse[129],
            in_csum_errors: parse[130],
            in_no_ect_pkts: parse[131],
            in_ect1_pkts: parse[132],
            in_ect0_pkts: parse[133],
            in_ce_pkts: parse[134],
        }
    }
}

#[test]
fn test_netstat_parse() {
    let netstat = "TcpExt: SyncookiesSent SyncookiesRecv SyncookiesFailed EmbryonicRsts PruneCalled RcvPruned OfoPruned OutOfWindowIcmps LockDroppedIcmps ArpFilter TW TWRecycled TWKilled PAWSPassive PAWSActive PAWSEstab DelayedACKs DelayedACKLocked DelayedACKLost ListenOverflows ListenDrops TCPPrequeued TCPDirectCopyFromBacklog TCPDirectCopyFromPrequeue TCPPrequeueDropped TCPHPHits TCPHPHitsToUser TCPPureAcks TCPHPAcks TCPRenoRecovery TCPSackRecovery TCPSACKReneging TCPFACKReorder TCPSACKReorder TCPRenoReorder TCPTSReorder TCPFullUndo TCPPartialUndo TCPDSACKUndo TCPLossUndo TCPLostRetransmit TCPRenoFailures TCPSackFailures TCPLossFailures TCPFastRetrans TCPForwardRetrans TCPSlowStartRetrans TCPTimeouts TCPLossProbes TCPLossProbeRecovery TCPRenoRecoveryFail TCPSackRecoveryFail TCPSchedulerFailed TCPRcvCollapsed TCPDSACKOldSent TCPDSACKOfoSent TCPDSACKRecv TCPDSACKOfoRecv TCPAbortOnData TCPAbortOnClose TCPAbortOnMemory TCPAbortOnTimeout TCPAbortOnLinger TCPAbortFailed TCPMemoryPressures TCPSACKDiscard TCPDSACKIgnoredOld TCPDSACKIgnoredNoUndo TCPSpuriousRTOs TCPMD5NotFound TCPMD5Unexpected TCPMD5Failure TCPSackShifted TCPSackMerged TCPSackShiftFallback TCPBacklogDrop PFMemallocDrop TCPMinTTLDrop TCPDeferAcceptDrop IPReversePathFilter TCPTimeWaitOverflow TCPReqQFullDoCookies TCPReqQFullDrop TCPRetransFail TCPRcvCoalesce TCPOFOQueue TCPOFODrop TCPOFOMerge TCPChallengeACK TCPSYNChallenge TCPFastOpenActive TCPFastOpenActiveFail TCPFastOpenPassive TCPFastOpenPassiveFail TCPFastOpenListenOverflow TCPFastOpenCookieReqd TCPSpuriousRtxHostQueues BusyPollRxPackets TCPAutoCorking TCPFromZeroWindowAdv TCPToZeroWindowAdv TCPWantZeroWindowAdv TCPSynRetrans TCPOrigDataSent TCPHystartTrainDetect TCPHystartTrainCwnd TCPHystartDelayDetect TCPHystartDelayCwnd TCPACKSkippedSynRecv TCPACKSkippedPAWS TCPACKSkippedSeq TCPACKSkippedFinWait2 TCPACKSkippedTimeWait TCPACKSkippedChallenge TCPWinProbe TCPKeepAlive TCPMTUPFail TCPMTUPSuccess
TcpExt: 0 0 0 0 10 0 0 5 0 0 24966 0 0 0 0 418 153312 160 70292 0 0 21725 853431 5364697 0 9757031 4275 767179 793029 1 4919 0 0 1515 9 18 49 10 1280 4538 45 38 727 334 5338 0 1214 8528 28009 7684 0 534 0 230 70929 504 11409 203 9780 13755 0 963 0 132 0 0 43 3001 144 0 0 0 762 1218 7770 0 0 0 0 185315 0 0 0 0 3756453 480306 0 479 1832 1790 0 0 0 0 0 0 404 0 114444 8 8 129 5757 1975855 0 0 90 3101 0 1 1 0 0 353 278 189472 0 0
IpExt: InNoRoutes InTruncatedPkts InMcastPkts OutMcastPkts InBcastPkts OutBcastPkts InOctets OutOctets InMcastOctets OutMcastOctets InBcastOctets OutBcastOctets InCsumErrors InNoECTPkts InECT1Pkts InECT0Pkts InCEPkts
IpExt: 272 0 340585 2787 456162 6 17643029703 1278315488 58113167 299032 63112043 468 916 18072021 0 1640 0";
    let ns = NetStat {
        tcp_want_zero_window_adv: 129,
        tcp_lost_retransmit: 45,
        tcp_abort_failed: 132,
        tcp_loss_undo: 4538,
        tcp_orig_data_sent: 1975855,
        paws_passive: 0,
        delayed_ack_lost: 70292,
        tcp_fast_open_cookie_reqd: 0,
        listen_overflows: 0,
        tcp_scheduler_failed: 0,
        tcp_ofo_queue: 480306,
        tw_killed: 0,
        syn_cookies_recv: 0,
        tcp_reno_recovery_fail: 0,
        tcp_time_wait_overflow: 0,
        tcp_ack_skipped_time_wait: 0,
        tcp_challenge_ack: 1832,
        tcp_dsack_undo: 1280,
        tcp_hystart_train_cwnd: 0,
        tcp_from_zero_window_adv: 8,
        tcp_rcv_coalesce: 3756453,
        tcp_hystart_delay_detect: 90,
        tcp_ack_skipped_challenge: 353,
        prune_called: 10,
        tcp_abort_on_linger: 0,
        tcp_hp_hits: 9757031,
        tcp_abort_on_memory: 0,
        tcp_fast_open_passive_fail: 0,
        tcp_fack_reorder: 0,
        tcp_sack_recovery_fail: 534,
        tcp_direct_copy_from_backlog: 853431,
        tcp_abort_on_close: 13755,
        tw: 24966,
        embryonic_rsts: 0,
        listen_drops: 0,
        delayed_acks: 153312,
        tcp_sack_failures: 727,
        rcv_pruned: 0,
        tcp_prequeued: 21725,
        tcp_sack_recovery: 4919,
        tcp_syn_challenge: 1790,
        pf_memalloc_drop: 0,
        tcp_syn_retrans: 5757,
        tcp_keep_alive: 189472,
        out_of_window_icmps: 5,
        lock_dropped_icmps: 0,
        tcp_md5_failure: 0,
        tcp_abort_on_timeout: 963,
        tcp_fast_open_passive: 0,
        tcp_retrans_fail: 0,
        tcp_sack_discard: 0,
        tcp_spurious_rtos: 144,
        tcp_partial_undo: 10,
        tcp_min_ttl_drop: 0,
        tcp_win_probe: 278,
        syn_cookies_failed: 0,
        tcp_slow_start_retrans: 1214,
        tcp_ack_skipped_syn_recv: 0,
        tcp_auto_corking: 114444,
        tcp_dsack_recv: 11409,
        tcp_backlog_drop: 0,
        tcp_sack_reneging: 0,
        tcp_rcv_collapsed: 230,
        tcp_loss_probes: 28009,
        paws_estab: 418,
        tcp_hystart_train_detect: 0,
        tcp_md5_unexpected: 0,
        tcp_abort_on_data: 9780,
        tcp_hystart_delay_cwnd: 3101,
        tw_recycled: 0,
        arp_filter: 0,
        tcp_mtup_fail: 0,
        tcp_full_undo: 49,
        syn_cookies_sent: 0,
        tcp_sack_shift_fallback: 7770,
        tcp_reno_recovery: 1,
        tco_dsack_ofo_recv: 203,
        tcp_loss_failures: 334,
        tcp_direct_copy_from_prequeue: 5364697,
        tcp_reno_failures: 38,
        tcp_dsack_ofo_sent: 504,
        ofo_pruned: 0,
        tcp_dsack_ignored_no_undo: 3001,
        tcp_ts_reorder: 18,
        tcp_md5_not_found: 0,
        tcp_timeouts: 8528,
        tcp_sack_shifted: 762,
        tcp_prequeue_dropped: 0,
        tcp_to_zero_window_adv: 8,
        tcp_sack_reorder: 1515,
        tcp_sack_merged: 1218,
        busy_poll_rx_packets: 0,
        ip_reverse_path_filter: 185315,
        tcp_spurious_rtx_host_queues: 404,
        tcp_forward_retrans: 0,
        tcp_fast_open_listen_overflow: 0,
        tcp_defer_accept_drop: 0,
        tcp_dsack_ignored_old: 43,
        tcp_fast_open_active: 0,
        paws_active: 0,
        tcp_ack_skipped_fin_wait2: 0,
        tcp_hp_hits_to_user: 4275,
        tcp_mtup_success: 0,
        tcp_dsack_old_send: 70929,
        tcp_loss_probe_recovery: 7684,
        tcp_req_qfull_drop: 0,
        tcp_memory_pressures: 0,
        tcp_hp_acks: 793029,
        delayed_ack_locked: 160,
        tcp_fast_open_active_fail: 0,
        tcp_ofo_drop: 0,
        tcp_fast_retrans: 5338,
        tcp_pure_acks: 767179,
        tcp_req_qfull_do_cookies: 0,
        tcp_reno_reorder: 9,
        tcp_ofo_merge: 479,
        tcp_ack_skipped_paws: 1,
        tcp_ack_skipped_seq: 1,
        in_no_routes: 272,
        in_truncated_pkts: 0,
        in_mcast_pkts: 340585,
        out_mcast_pkts: 2787,
        in_bcast_pkts: 456162,
        out_bcast_pkts: 6,
        in_octets: 17643029703,
        out_octets: 1278315488,
        in_mcast_octets: 58113167,
        out_mcast_octets: 299032,
        in_bcast_octets: 63112043,
        out_bcast_octets: 468,
        in_csum_errors: 916,
        in_no_ect_pkts: 18072021,
        in_ect1_pkts: 0,
        in_ect0_pkts: 1640,
        in_ce_pkts: 0,
    };
    let test = NetStat::parse(netstat.to_string());
    assert_eq!(test, ns)
}
